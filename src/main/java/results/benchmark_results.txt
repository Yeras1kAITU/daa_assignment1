Result "benchmarks.SortingBenchmark.quickSort":
  3,060 ±(99.9%) 0,032 ms/op [Average]
  (min, avg, max) = (3,036, 3,060, 3,102), stdev = 0,021
  CI (99.9%): [3,028, 3,092] (assumes normal distribution)


# Run complete. Total time: 00:08:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          (arraySize)  (pointsSize)  Mode  Cnt     Score    Error  Units
ClosestPairBenchmark.closestPairBruteForce                 N/A           100  avgt    3     0,010 ±  0,005  ms/op
ClosestPairBenchmark.closestPairBruteForce                 N/A           500  avgt    3     0,257 ±  0,031  ms/op
ClosestPairBenchmark.closestPairBruteForce                 N/A          1000  avgt    3     1,020 ±  0,031  ms/op
ClosestPairBenchmark.closestPairBruteForce                 N/A          2000  avgt    3     4,097 ±  0,156  ms/op
ClosestPairBenchmark.closestPairDivideConquer              N/A           100  avgt    3     0,007 ±  0,001  ms/op
ClosestPairBenchmark.closestPairDivideConquer              N/A           500  avgt    3     0,054 ±  0,048  ms/op
ClosestPairBenchmark.closestPairDivideConquer              N/A          1000  avgt    3     0,161 ±  0,018  ms/op
ClosestPairBenchmark.closestPairDivideConquer              N/A          2000  avgt    3     0,445 ±  0,030  ms/op
SelectVsSortBenchmark.deterministicSelectMedian            100           N/A  avgt   10     0,924 ±  0,023  us/op
SelectVsSortBenchmark.deterministicSelectMedian           1000           N/A  avgt   10    13,543 ±  0,500  us/op
SelectVsSortBenchmark.deterministicSelectMedian          10000           N/A  avgt   10   247,940 ±  6,854  us/op
SelectVsSortBenchmark.deterministicSelectMedian          50000           N/A  avgt   10  1230,323 ± 29,641  us/op
SelectVsSortBenchmark.deterministicSelectVariousK          100           N/A  avgt   10     3,155 ±  0,031  us/op
SelectVsSortBenchmark.deterministicSelectVariousK         1000           N/A  avgt   10    37,465 ±  0,479  us/op
SelectVsSortBenchmark.deterministicSelectVariousK        10000           N/A  avgt   10   584,508 ±  2,354  us/op
SelectVsSortBenchmark.deterministicSelectVariousK        50000           N/A  avgt   10  3657,603 ± 60,474  us/op
SelectVsSortBenchmark.sortThenSelectMedian                 100           N/A  avgt   10     0,673 ±  0,014  us/op
SelectVsSortBenchmark.sortThenSelectMedian                1000           N/A  avgt   10    12,092 ±  0,080  us/op
SelectVsSortBenchmark.sortThenSelectMedian               10000           N/A  avgt   10   333,117 ±  6,557  us/op
SelectVsSortBenchmark.sortThenSelectMedian               50000           N/A  avgt   10  2069,225 ± 22,363  us/op
SelectVsSortBenchmark.sortThenSelectVariousK               100           N/A  avgt   10     0,661 ±  0,044  us/op
SelectVsSortBenchmark.sortThenSelectVariousK              1000           N/A  avgt   10    12,320 ±  0,064  us/op
SelectVsSortBenchmark.sortThenSelectVariousK             10000           N/A  avgt   10   337,516 ± 10,331  us/op
SelectVsSortBenchmark.sortThenSelectVariousK             50000           N/A  avgt   10  2097,502 ± 45,109  us/op
SortingBenchmark.arraysSort                                100           N/A  avgt   10     0,001 ±  0,001  ms/op
SortingBenchmark.arraysSort                               1000           N/A  avgt   10     0,012 ±  0,001  ms/op
SortingBenchmark.arraysSort                              10000           N/A  avgt   10     0,335 ±  0,005  ms/op
SortingBenchmark.arraysSort                              50000           N/A  avgt   10     2,076 ±  0,026  ms/op
SortingBenchmark.mergeSort                                 100           N/A  avgt   10     0,001 ±  0,001  ms/op
SortingBenchmark.mergeSort                                1000           N/A  avgt   10     0,014 ±  0,001  ms/op
SortingBenchmark.mergeSort                               10000           N/A  avgt   10     0,549 ±  0,005  ms/op
SortingBenchmark.mergeSort                               50000           N/A  avgt   10     3,387 ±  0,020  ms/op
SortingBenchmark.quickSort                                 100           N/A  avgt   10     0,004 ±  0,001  ms/op
SortingBenchmark.quickSort                                1000           N/A  avgt   10     0,044 ±  0,001  ms/op
SortingBenchmark.quickSort                               10000           N/A  avgt   10     0,541 ±  0,009  ms/op
SortingBenchmark.quickSort                               50000           N/A  avgt   10     3,060 ±  0,032  ms/op

Process finished with exit code 0
